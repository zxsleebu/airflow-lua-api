{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#loading-lua-scripts","title":"Loading Lua scripts","text":"<ol> <li>Drop script into <code>Counter-Strike Global Offensive\\airflow\\scripts\\local</code> folder.</li> <li>Click \"Refresh\" in the \"Scripts\" tab in cheat menu.</li> <li>Select the script from list and press \"Load\".</li> </ol>"},{"location":"callbacks/","title":"callbacks","text":""},{"location":"callbacks/#on_create_move","title":"on_create_move","text":"<p><code>on_create_move(cmd: user_cmd)</code> </p> Name Type Description cmd <code>user_cmd</code> User command"},{"location":"callbacks/#on_antiaim","title":"on_antiaim","text":"<p><code>on_antiaim(cmd: user_cmd)</code> </p> Name Type Description cmd <code>user_cmd</code> User command"},{"location":"callbacks/#on_pre_move","title":"on_pre_move","text":"<p><code>on_pre_move(cmd: user_cmd)</code> </p> Name Type Description cmd <code>user_cmd</code> User command"},{"location":"callbacks/#on_post_move","title":"on_post_move","text":"<p><code>on_post_move(cmd: user_cmd)</code> </p> Name Type Description cmd <code>user_cmd</code> User command"},{"location":"callbacks/#on_paint","title":"on_paint","text":"<p><code>on_paint()</code> </p>"},{"location":"callbacks/#on_update_client_side_animation","title":"on_update_client_side_animation","text":"<p><code>on_update_client_side_animation()</code> </p>"},{"location":"cheat/","title":"cheat","text":""},{"location":"cheat/#is_menu_visible","title":"is_menu_visible","text":"<p><code>cheat.is_menu_visible():</code> <code>boolean</code> </p>"},{"location":"cheat/#add_callback","title":"add_callback","text":"<p><code>cheat.add_callback(name: string, callback: function)</code> </p> Name Type Description name <code>string</code> Callback name. Look here for callbacks list callback <code>function</code> Callback function"},{"location":"cheat/#add_event_callback","title":"add_event_callback","text":"<p><code>cheat.add_event_callback(event: string, callback: function)</code> </p> Name Type Description event <code>string</code> Game event name. callback <code>function</code> Callback function. Receives <code>event</code> in the first argument."},{"location":"cheat/#log","title":"log","text":"<p><code>cheat.log(text: string)</code> </p> Name Type Description text <code>string</code> Text to print to console"},{"location":"cheat/#color_log","title":"color_log","text":"<p><code>cheat.color_log(text: string, color: color_t)</code> </p> Name Type Description text <code>string</code> Text to print to console color <code>color_t</code> Color of the text"},{"location":"cheat/#screen_size","title":"screen_size","text":"<p><code>cheat.screen_size():</code> <code>vec2_t</code> </p>"},{"location":"cheat/#get_username","title":"get_username","text":"<p><code>cheat.get_username():</code> <code>string</code> </p>"},{"location":"cheat/#get_build","title":"get_build","text":"<p><code>cheat.get_build():</code> <code>string</code> </p>"},{"location":"client_state/","title":"client_state","text":"Name Type Description choked_commands <code>number</code> Count of choked commands command_ack <code>number</code> Last command that server has been acknowledged of last_outgoing_command <code>number</code> Number of last command sequence number acknowledged by server last_command_ack <code>number</code> Last valid received server tick"},{"location":"config/","title":"config","text":""},{"location":"config/#functions","title":"Functions","text":""},{"location":"config/#read","title":"read","text":"<p><code>config.read(key: string):</code> <code>menu_element</code> </p> Name Type Description key <code>string</code> Key to read Example <pre><code>local hide_shots = config.read(\"binds.hide_shots.enable\")\ncheat.log(hide_shots:get()) -- read the value\nhide_shots:set(true) -- set the value\n</code></pre>"},{"location":"config/#general-infomation","title":"General infomation","text":"<p>To obtain vars enable developer mode in scripts tab, hover over element and you will see popup with the var. </p>"},{"location":"entity/","title":"entity","text":""},{"location":"entity/#local_player","title":"local_player","text":"<p><code>entity.local_player():</code> <code>entity</code> </p>"},{"location":"entity/#get_players","title":"get_players","text":"Return styleCallback style <p><code>entity.get_players(enemies_only: boolean, include_dormant: boolean):</code> <code>entity[]</code> </p> Name Type Description enemies_only <code>boolean</code> Whether to return only enemies include_dormant <code>boolean</code> Whether to include dormant entities or not <p><code>entity.get_players(enemies_only: boolean, include_dormant: boolean, callback: function)</code> </p> Name Type Description enemies_only <code>boolean</code> Whether to return only enemies include_dormant <code>boolean</code> Whether to include dormant entities or not callback <code>function</code> Callback function, that receives <code>entity</code> as an argument <pre><code>entitylist.get_entities(false, false, function(entity)\nprint(entity:get_origin().x, entity:get_origin().y, entity:get_origin().z)\nend)\n</code></pre>"},{"location":"exploits/","title":"exploits","text":""},{"location":"exploits/#is_charged","title":"is_charged","text":"<p><code>exploits.is_charged():</code> <code>boolean</code> </p>"},{"location":"exploits/#override_shift","title":"override_shift","text":"<p><code>exploits.override_shift(value: number)</code> </p> Name Type Description value <code>number</code> Value to set"},{"location":"exploits/#is_force_defensive","title":"is_force_defensive","text":"<p><code>exploits.is_force_defensive():</code> <code>boolean</code> </p>"},{"location":"exploits/#force_defensive","title":"force_defensive","text":"<p><code>exploits.force_defensive(value: boolean)</code> </p> Name Type Description value <code>boolean</code> Force defensive or disable it"},{"location":"globals/","title":"globals","text":"Name Type Description curtime <code>number</code> Current server time in seconds realtime <code>number</code> Current local time in seconds frametime <code>number</code> Time that was used to render a last game frame in seconds framecount <code>number</code> Total rendered frames count absoluteframetime <code>number</code> Time that was used to render a last game frame in seconds tickcount <code>number</code> Count of ticks that server has handled interval_per_tick <code>number</code> Duration of a tick in seconds interpolation_amount <code>number</code> Amount of interpolation max_clients <code>number</code> Maximum number of players allowed on the server"},{"location":"memory/","title":"memory","text":""},{"location":"memory/#find_pattern","title":"find_pattern","text":"<p><code>memory.find_pattern(module: string, pattern: string):</code> <code>number</code> </p> Name Type Description module <code>string</code> Module what you will scan pattern <code>string</code> Byte sequence what you trying to find"},{"location":"renderer/","title":"renderer","text":""},{"location":"renderer/#functions","title":"Functions","text":""},{"location":"renderer/#create_font","title":"create_font","text":"<p><code>renderer.create_font(filename: string, size: number, flags: number):</code> <code>font_t</code> </p> Name Type Description filename <code>string</code> Path to the font size <code>number</code> Font size flags <code>number</code> Font flags <p>Warning</p> <p>If you specify a font that does not exist, return value will be <code>nil</code>.</p> Font flags <pre><code>1   -- Disable hinting. This generally generates 'blurrier' bitmap glyphs when the glyph are rendered in any of the anti-aliased modes.\n2   -- Disable auto-hinter.\n4   -- Indicates that the auto-hinter is preferred over the font's native hinter.\n8   -- Strong hinting algorithm that should only be used for monochrome output.\n16  -- Styling: Should we artificially embolden the font?\n32  -- Styling: Should we slant the font, emulating italic style?\n64  -- Disable anti-aliasing. Combine this with MonoHinting for best results!\n</code></pre>"},{"location":"renderer/#text_size","title":"text_size","text":"<p><code>renderer.text_size(text: string, font: font_t, size?: number):</code> <code>vec2_t</code> </p> Name Type Description text <code>string</code> Text size of which will be calculated font <code>font_t</code> Font object size <code>number</code> Optional. Font size <p>Warning</p> <p>If you specify a font that does not exist, return value will be <code>nil</code>.</p>"},{"location":"renderer/#draw-functions","title":"Draw functions","text":""},{"location":"renderer/#text","title":"text","text":"<p><code>renderer.text(pos: vec2_t, text: string, font: font_t, color?: color_t, size?: number)</code> </p> Name Type Description pos <code>vec2_t</code> Position of where text will be rendered text <code>string</code> Text to render font <code>font_t</code> Font object, or <code>0</code> = default font, or <code>1</code> = pixel font color <code>color_t</code> Optional. Text color size <code>number</code> Optional. Text size"},{"location":"renderer/#rect","title":"rect","text":"<p><code>renderer.rect(from: vec2_t, to: vec2_t, color: color_t, rounding: number, corner_flags: number)</code> </p> Name Type Description from <code>vec2_t</code> Start position of the rectangle to <code>vec2_t</code> End position of the rectangle color <code>color_t</code> Color of the rectangle rounding <code>number</code> Rounding of the rectangle corner_flags <code>number</code> Corner flags"},{"location":"renderer/#filled_rect","title":"filled_rect","text":"<p><code>renderer.filled_rect(from: vec2_t, to: vec2_t, color: color_t, rounding: number, corner_flags: number)</code> </p> Name Type Description from <code>vec2_t</code> Start position of a rectangle to <code>vec2_t</code> End position of the rectangle color <code>color_t</code> Color of the rectangle rounding <code>number</code> Rounding of the rectangle corner_flags <code>number</code> Corner flags"},{"location":"renderer/#filled_rect_gradient","title":"filled_rect_gradient","text":"<p><code>renderer.filled_rect_gradient(from: vec2_t, to: vec2_t, col_top_left: color_t, col_top_right: color_t, col_bot_right: color_t, col_bot_left: color_t, rounding: number, corner_flags: number)</code> </p> Name Type Description from <code>vec2_t</code> Start position of a rectangle to <code>vec2_t</code> End position of a rectangle col_top_left <code>color_t</code> Color of the top left corner col_top_right <code>color_t</code> Color of the top right corner col_bot_right <code>color_t</code> Color of the bottom right corner col_bot_left <code>color_t</code> Color of the bottom left corner rounding <code>number</code> Rounding of the rectangle corner_flags <code>number</code> Corner flags"},{"location":"renderer/#circle","title":"circle","text":"<p><code>renderer.circle(pos: vec2_t, color: color_t, radius: number, segments: number)</code> </p> Name Type Description pos <code>vec2_t</code> Position of the circle color <code>color_t</code> Color of the circle radius <code>number</code> Radius of the circle segments <code>number</code> Count of the circle segments"},{"location":"renderer/#filled_circle","title":"filled_circle","text":"<p><code>renderer.filled_circle(pos: vec2_t, color: color_t, radius: number, segments: number)</code> </p> Name Type Description pos <code>vec2_t</code> Position of the circle color <code>color_t</code> Color of the circle radius <code>number</code> Radius of the circle segments <code>number</code> Count of the circle segments"},{"location":"renderer/#corner-flags","title":"Corner flags","text":"<pre><code>top left -- 1\ntop right -- 2\nbottom left -- 4\nbottom right -- 8\ntop -- 3\nbottom -- 12\nleft -- 5\nright -- 10  \n</code></pre>"},{"location":"ui/","title":"ui","text":""},{"location":"ui/#add_checkbox","title":"add_checkbox","text":"<p><code>ui.add_checkbox(name: string):</code> <code>menu_element</code> </p> Name Type Description name <code>string</code> Name of the checkbox Example <pre><code>local check_box = ui.add_checkbox(\"my checkbox!\")\nlocal check_box_enabled = check_box:get() -- get value of checkbox \nif check_box_enabled then\ncheat.log(tostring(check_box_enabled))\nend\ncheck_box:set(true) -- set value of checkbox to true\n</code></pre>"},{"location":"ui/#add_slider","title":"add_slider","text":"<p><code>ui.add_slider(name: string, min: number, max: number):</code> <code>menu_element</code> </p> Name Type Description name <code>string</code> Name of the slider min <code>number</code> Minimum value of the slider max <code>number</code> Maximum value of the slider Example <pre><code>local slider = ui.add_slider(\"my slider!\", 0, 100)\nlocal slider_value = slider:get() -- get value of slider\nif slider_value &gt; 30 then\ncheat.log(tostring(slider_value))\nend\nslider:set(31) -- set value of slider to 31\n</code></pre>"},{"location":"ui/#add_color_picker","title":"add_color_picker","text":"<p><code>ui.add_color_picker(name: string):</code> <code>menu_element</code> </p> Name Type Description name <code>string</code> Name of the color picker Example <pre><code>local color_picker = ui.add_color_picker(\"my color picker!\")\nlocal color_picker_value = color_picker:get() -- get value of color picker\nif color_picker_value.r == 255 and color_picker_value.g == 255 \nand color_picker_value.b == 255 then\ncheat.log(\"color is white!\")\nend\ncolor_picker:set(color.new(255, 255, 255)) -- set color picker to white\n</code></pre>"},{"location":"ui/#add_combo_box","title":"add_combo_box","text":"<p><code>ui.add_combo_box(name: string, elements: table):</code> <code>menu_element</code> </p> Name Type Description name <code>string</code> Name of the combo box elements <code>table</code> Array of elements"},{"location":"ui/#add_multi_combo","title":"add_multi_combo","text":"<p><code>ui.add_multi_combo(name: string, elements: table):</code> <code>menu_element</code> </p> Name Type Description name <code>string</code> Name of the multi combo elements <code>table</code> Array of elements"},{"location":"types/color/","title":"color","text":"Name Type r <code>number</code> g <code>number</code> b <code>number</code> a <code>number</code>"},{"location":"types/entity/","title":"entity","text":""},{"location":"types/entity/#entity-functions","title":"Entity functions","text":""},{"location":"types/entity/#index","title":"index","text":"<p><code>entity:index():</code> <code>number</code> </p>"},{"location":"types/entity/#is_bot","title":"is_bot","text":"<p><code>entity:is_bot():</code> <code>boolean</code> </p>"},{"location":"types/entity/#is_alive","title":"is_alive","text":"<p><code>entity:is_alive():</code> <code>boolean</code> </p>"},{"location":"types/entity/#dormant","title":"dormant","text":"<p><code>entity:dormant():</code> <code>boolean</code> </p>"},{"location":"types/entity/#abs_angles","title":"abs_angles","text":"<p><code>entity:abs_angles():</code> <code>vec3_t</code> </p>"},{"location":"types/entity/#abs_origin","title":"abs_origin","text":"<p><code>entity:abs_origin():</code> <code>vec3_t</code> </p>"},{"location":"types/entity/#health","title":"health","text":"<p><code>entity:health():</code> <code>number</code> </p>"},{"location":"types/entity/#is_armored","title":"is_armored","text":"<p><code>entity:is_armored():</code> <code>boolean</code> </p>"},{"location":"types/entity/#flags","title":"flags","text":"<p><code>entity:flags():</code> <code>number</code> </p>"},{"location":"types/entity/#effects","title":"effects","text":"<p><code>entity:effects():</code> <code>number</code> </p>"},{"location":"types/entity/#eye_position","title":"eye_position","text":"<p><code>entity:eye_position():</code> <code>vec3_t</code> </p>"},{"location":"types/entity/#ducking","title":"ducking","text":"<p><code>entity:ducking():</code> <code>boolean</code> </p>"},{"location":"types/entity/#has_defuser","title":"has_defuser","text":"<p><code>entity:has_defuser():</code> <code>boolean</code> </p>"},{"location":"types/entity/#team","title":"team","text":"<p><code>entity:team():</code> <code>number</code> </p>"},{"location":"types/entity/#scoped","title":"scoped","text":"<p><code>entity:scoped():</code> <code>boolean</code> </p>"},{"location":"types/entity/#max_speed","title":"max_speed","text":"<p><code>entity:max_speed():</code> <code>number</code> </p>"},{"location":"types/entity/#move_state","title":"move_state","text":"<p><code>entity:move_state():</code> <code>number</code> </p>"},{"location":"types/entity/#move_type","title":"move_type","text":"<p><code>entity:move_type():</code> <code>number</code> </p>"},{"location":"types/entity/#velocity_modifier","title":"velocity_modifier","text":"<p><code>entity:velocity_modifier():</code> <code>number</code> </p>"},{"location":"types/entity/#spotted","title":"spotted","text":"<p><code>entity:spotted():</code> <code>boolean</code> </p>"},{"location":"types/entity/#getting-ffi-pointer","title":"Getting FFI pointer","text":""},{"location":"types/entity/#ffi","title":"ffi","text":"<p><code>entity:ffi():</code> <code>number</code> </p>"},{"location":"types/entity/#getting-props","title":"Getting props","text":""},{"location":"types/entity/#prop","title":"prop","text":"<p><code>entity:prop(table_name: string, netvar_name: string):</code> <code>prop</code> </p> Name Type Description table_name <code>string</code> Table name netvar_name <code>string</code> Netvar name"},{"location":"types/entity/#prop_t","title":"prop_t","text":""},{"location":"types/entity/#get","title":"get","text":"<p><code>prop:get():</code> <code>any</code> </p>"},{"location":"types/entity/#set","title":"set","text":"<p><code>prop:set(value: any)</code> </p> Name Type Description value <code>any</code> Value to set"},{"location":"types/event/","title":"event","text":""},{"location":"types/event/#get_bool","title":"get_bool","text":"<p><code>event:get_bool(key_name: string):</code> <code>boolean</code> </p> Name Type Description key_name <code>string</code> Key name"},{"location":"types/event/#get_int","title":"get_int","text":"<p><code>event:get_int(key_name: string):</code> <code>number</code> </p> Name Type Description key_name <code>string</code> Key name"},{"location":"types/event/#get_float","title":"get_float","text":"<p><code>event:get_float(key_name: string):</code> <code>number</code> </p> Name Type Description key_name <code>string</code> Key name"},{"location":"types/event/#get_string","title":"get_string","text":"<p><code>event:get_string(key_name: string):</code> <code>string</code> </p> Name Type Description key_name <code>string</code> Key name"},{"location":"types/menu_element/","title":"menu_element","text":""},{"location":"types/menu_element/#get","title":"get","text":"<p><code>element:get():</code> <code>any</code> </p>"},{"location":"types/menu_element/#set","title":"set","text":"<p><code>element:set(value: any)</code> </p> Name Type Description value <code>any</code> Value to set"},{"location":"types/menu_element/#set_visible","title":"set_visible","text":"<p><code>element:set_visible(value: boolean)</code> </p> Name Type Description value <code>boolean</code> Value to set"},{"location":"types/user_cmd/","title":"user_cmd","text":"Name Type Description aimdirection <code>vec3_t</code> Aim direction command_number <code>number</code> Current command number impulse <code>number</code> Current impulse command number tick_count <code>number</code> Current tick count viewangles <code>vec3_t</code> Crosshair angle predicted <code>boolean</code> Is predicted forwardmove <code>number</code> Forward/backward speed sidemove <code>number</code> Left/right speed upmove <code>number</code> Up/down speed buttons <code>number</code> Buttons bit field random_seed <code>number</code> Random seed for shared random functions mousedx <code>number</code> Mouse X movement delta mousedy <code>number</code> Mouse Y movement delta weaponselect <code>number</code> Selected weapon index weaponsubtype <code>number</code> Selected weapon subtype (R8 / Deagle, M4A4 / M4A1-S)"},{"location":"types/vec2_t/","title":"vec2_t","text":"Name Type x <code>number</code> y <code>number</code>"},{"location":"types/vec2_t/#length","title":"length","text":"<p><code>vec2:length():</code> <code>number</code> </p>"},{"location":"types/vec3_t/","title":"vec3_t","text":"Name Type x <code>number</code> y <code>number</code> z <code>number</code>"},{"location":"types/vec3_t/#length","title":"length","text":"<p><code>vec3:length():</code> <code>number</code> </p>"},{"location":"types/vec3_t/#distance_to","title":"distance_to","text":"<p><code>vec3:distance_to(vec: vec3_t):</code> <code>number</code> </p> Name Type Description vec <code>vec3_t</code> Vector to calculate distance to"}]}